# [doc = "Register `SPI0A8` reader"] pub type R = crate :: R < Spi0a8Spec > ; # [doc = "Register `SPI0A8` writer"] pub type W = crate :: W < Spi0a8Spec > ; # [doc = "Field `LockSPIR00FromWrUntilRstBySRST` reader - Lock SPIR00 from write until reset by SRST#"] pub type LockSpir00fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR00FromWrUntilRstBySRST` writer - Lock SPIR00 from write until reset by SRST#"] pub type LockSpir00fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR04FromWrUntilRstBySRST` reader - Lock SPIR04 from write until reset by SRST#"] pub type LockSpir04fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR04FromWrUntilRstBySRST` writer - Lock SPIR04 from write until reset by SRST#"] pub type LockSpir04fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR10FromWrUntilRstBySRST` reader - Lock SPIR10 from write until reset by SRST#"] pub type LockSpir10fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR10FromWrUntilRstBySRST` writer - Lock SPIR10 from write until reset by SRST#"] pub type LockSpir10fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR14FromWrUntilRstBySRST` reader - Lock SPIR14 from write until reset by SRST#"] pub type LockSpir14fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR14FromWrUntilRstBySRST` writer - Lock SPIR14 from write until reset by SRST#"] pub type LockSpir14fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR18FromWrUntilRstBySRST` reader - Lock SPIR18 from write until reset by SRST#"] pub type LockSpir18fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR18FromWrUntilRstBySRST` writer - Lock SPIR18 from write until reset by SRST#"] pub type LockSpir18fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR30FromWrUntilRstBySRST` reader - Lock SPIR30 from write until reset by SRST#"] pub type LockSpir30fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR30FromWrUntilRstBySRST` writer - Lock SPIR30 from write until reset by SRST#"] pub type LockSpir30fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR34FromWrUntilRstBySRST` reader - Lock SPIR34 from write until reset by SRST#"] pub type LockSpir34fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR34FromWrUntilRstBySRST` writer - Lock SPIR34 from write until reset by SRST#"] pub type LockSpir34fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR38FromWrUntilRstBySRST` reader - Lock SPIR38 from write until reset by SRST#"] pub type LockSpir38fromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR38FromWrUntilRstBySRST` writer - Lock SPIR38 from write until reset by SRST#"] pub type LockSpir38fromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR94SPIR98SPIR9CFromWrUntilRstBySRST` reader - Lock SPIR94/SPIR98/SPIR9C from write until reset by SRST#"] pub type LockSpir94spir98spir9cfromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIR94SPIR98SPIR9CFromWrUntilRstBySRST` writer - Lock SPIR94/SPIR98/SPIR9C from write until reset by SRST#"] pub type LockSpir94spir98spir9cfromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIRA0AndFQCDAQCDFromWrUntilRstBySRST` reader - Lock SPIRA0 and FQCD/AQCD from write until reset by SRST#"] pub type LockSpira0andFqcdaqcdfromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIRA0AndFQCDAQCDFromWrUntilRstBySRST` writer - Lock SPIRA0 and FQCD/AQCD from write until reset by SRST#"] pub type LockSpira0andFqcdaqcdfromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIRA4AndAddrFilterFromWrUntilRstBySRST` reader - Lock SPIRA4 and Address Filter from write until reset by SRST#"] pub type LockSpira4andAddrFilterFromWrUntilRstBySrstR = crate :: BitReader ; # [doc = "Field `LockSPIRA4AndAddrFilterFromWrUntilRstBySRST` writer - Lock SPIRA4 and Address Filter from write until reset by SRST#"] pub type LockSpira4andAddrFilterFromWrUntilRstBySrstW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR64FromWrUntilRstBySRSTSPI1` reader - Lock SPIR64 from write until reset by SRST# (SPI1)"] pub type LockSpir64fromWrUntilRstBySrstspi1R = crate :: BitReader ; # [doc = "Field `LockSPIR64FromWrUntilRstBySRSTSPI1` writer - Lock SPIR64 from write until reset by SRST# (SPI1)"] pub type LockSpir64fromWrUntilRstBySrstspi1W < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `LockSPIR70SPIR74SPIR78FromWrUntilRstBySRSTSPI1` reader - Lock SPIR70/SPIR74/SPIR78 from write until reset by SRST# (SPI1)"] pub type LockSpir70spir74spir78fromWrUntilRstBySrstspi1R = crate :: BitReader ; # [doc = "Field `LockSPIR70SPIR74SPIR78FromWrUntilRstBySRSTSPI1` writer - Lock SPIR70/SPIR74/SPIR78 from write until reset by SRST# (SPI1)"] pub type LockSpir70spir74spir78fromWrUntilRstBySrstspi1W < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 0 - Lock SPIR00 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir00from_wr_until_rst_by_srst (& self) -> LockSpir00fromWrUntilRstBySrstR { LockSpir00fromWrUntilRstBySrstR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Lock SPIR04 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir04from_wr_until_rst_by_srst (& self) -> LockSpir04fromWrUntilRstBySrstR { LockSpir04fromWrUntilRstBySrstR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Lock SPIR10 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir10from_wr_until_rst_by_srst (& self) -> LockSpir10fromWrUntilRstBySrstR { LockSpir10fromWrUntilRstBySrstR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Lock SPIR14 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir14from_wr_until_rst_by_srst (& self) -> LockSpir14fromWrUntilRstBySrstR { LockSpir14fromWrUntilRstBySrstR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Lock SPIR18 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir18from_wr_until_rst_by_srst (& self) -> LockSpir18fromWrUntilRstBySrstR { LockSpir18fromWrUntilRstBySrstR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Lock SPIR30 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir30from_wr_until_rst_by_srst (& self) -> LockSpir30fromWrUntilRstBySrstR { LockSpir30fromWrUntilRstBySrstR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Lock SPIR34 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir34from_wr_until_rst_by_srst (& self) -> LockSpir34fromWrUntilRstBySrstR { LockSpir34fromWrUntilRstBySrstR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Lock SPIR38 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir38from_wr_until_rst_by_srst (& self) -> LockSpir38fromWrUntilRstBySrstR { LockSpir38fromWrUntilRstBySrstR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Lock SPIR94/SPIR98/SPIR9C from write until reset by SRST#"] # [inline (always)] pub fn lock_spir94spir98spir9cfrom_wr_until_rst_by_srst (& self) -> LockSpir94spir98spir9cfromWrUntilRstBySrstR { LockSpir94spir98spir9cfromWrUntilRstBySrstR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Lock SPIRA0 and FQCD/AQCD from write until reset by SRST#"] # [inline (always)] pub fn lock_spira0and_fqcdaqcdfrom_wr_until_rst_by_srst (& self) -> LockSpira0andFqcdaqcdfromWrUntilRstBySrstR { LockSpira0andFqcdaqcdfromWrUntilRstBySrstR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Lock SPIRA4 and Address Filter from write until reset by SRST#"] # [inline (always)] pub fn lock_spira4and_addr_filter_from_wr_until_rst_by_srst (& self) -> LockSpira4andAddrFilterFromWrUntilRstBySrstR { LockSpira4andAddrFilterFromWrUntilRstBySrstR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Lock SPIR64 from write until reset by SRST# (SPI1)"] # [inline (always)] pub fn lock_spir64from_wr_until_rst_by_srstspi1 (& self) -> LockSpir64fromWrUntilRstBySrstspi1R { LockSpir64fromWrUntilRstBySrstspi1R :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Lock SPIR70/SPIR74/SPIR78 from write until reset by SRST# (SPI1)"] # [inline (always)] pub fn lock_spir70spir74spir78from_wr_until_rst_by_srstspi1 (& self) -> LockSpir70spir74spir78fromWrUntilRstBySrstspi1R { LockSpir70spir74spir78fromWrUntilRstBySrstspi1R :: new (((self . bits >> 12) & 1) != 0) } } impl W { # [doc = "Bit 0 - Lock SPIR00 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir00from_wr_until_rst_by_srst (& mut self) -> LockSpir00fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir00fromWrUntilRstBySrstW :: new (self , 0) } # [doc = "Bit 1 - Lock SPIR04 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir04from_wr_until_rst_by_srst (& mut self) -> LockSpir04fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir04fromWrUntilRstBySrstW :: new (self , 1) } # [doc = "Bit 2 - Lock SPIR10 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir10from_wr_until_rst_by_srst (& mut self) -> LockSpir10fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir10fromWrUntilRstBySrstW :: new (self , 2) } # [doc = "Bit 3 - Lock SPIR14 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir14from_wr_until_rst_by_srst (& mut self) -> LockSpir14fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir14fromWrUntilRstBySrstW :: new (self , 3) } # [doc = "Bit 4 - Lock SPIR18 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir18from_wr_until_rst_by_srst (& mut self) -> LockSpir18fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir18fromWrUntilRstBySrstW :: new (self , 4) } # [doc = "Bit 5 - Lock SPIR30 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir30from_wr_until_rst_by_srst (& mut self) -> LockSpir30fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir30fromWrUntilRstBySrstW :: new (self , 5) } # [doc = "Bit 6 - Lock SPIR34 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir34from_wr_until_rst_by_srst (& mut self) -> LockSpir34fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir34fromWrUntilRstBySrstW :: new (self , 6) } # [doc = "Bit 7 - Lock SPIR38 from write until reset by SRST#"] # [inline (always)] pub fn lock_spir38from_wr_until_rst_by_srst (& mut self) -> LockSpir38fromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir38fromWrUntilRstBySrstW :: new (self , 7) } # [doc = "Bit 8 - Lock SPIR94/SPIR98/SPIR9C from write until reset by SRST#"] # [inline (always)] pub fn lock_spir94spir98spir9cfrom_wr_until_rst_by_srst (& mut self) -> LockSpir94spir98spir9cfromWrUntilRstBySrstW < Spi0a8Spec > { LockSpir94spir98spir9cfromWrUntilRstBySrstW :: new (self , 8) } # [doc = "Bit 9 - Lock SPIRA0 and FQCD/AQCD from write until reset by SRST#"] # [inline (always)] pub fn lock_spira0and_fqcdaqcdfrom_wr_until_rst_by_srst (& mut self) -> LockSpira0andFqcdaqcdfromWrUntilRstBySrstW < Spi0a8Spec > { LockSpira0andFqcdaqcdfromWrUntilRstBySrstW :: new (self , 9) } # [doc = "Bit 10 - Lock SPIRA4 and Address Filter from write until reset by SRST#"] # [inline (always)] pub fn lock_spira4and_addr_filter_from_wr_until_rst_by_srst (& mut self) -> LockSpira4andAddrFilterFromWrUntilRstBySrstW < Spi0a8Spec > { LockSpira4andAddrFilterFromWrUntilRstBySrstW :: new (self , 10) } # [doc = "Bit 11 - Lock SPIR64 from write until reset by SRST# (SPI1)"] # [inline (always)] pub fn lock_spir64from_wr_until_rst_by_srstspi1 (& mut self) -> LockSpir64fromWrUntilRstBySrstspi1W < Spi0a8Spec > { LockSpir64fromWrUntilRstBySrstspi1W :: new (self , 11) } # [doc = "Bit 12 - Lock SPIR70/SPIR74/SPIR78 from write until reset by SRST# (SPI1)"] # [inline (always)] pub fn lock_spir70spir74spir78from_wr_until_rst_by_srstspi1 (& mut self) -> LockSpir70spir74spir78fromWrUntilRstBySrstspi1W < Spi0a8Spec > { LockSpir70spir74spir78fromWrUntilRstBySrstspi1W :: new (self , 12) } } # [doc = "Register Lock Control Register (SRST\\#)\n\nYou can [`read`](crate::Reg::read) this register and get [`spi0a8::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`spi0a8::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Spi0a8Spec ; impl crate :: RegisterSpec for Spi0a8Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`spi0a8::R`](R) reader structure"] impl crate :: Readable for Spi0a8Spec { } # [doc = "`write(|w| ..)` method takes [`spi0a8::W`](W) writer structure"] impl crate :: Writable for Spi0a8Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SPI0A8 to value 0"] impl crate :: Resettable for Spi0a8Spec { }