# [doc = "Register `SCUA50` reader"] pub type R = crate :: R < Scua50Spec > ; # [doc = "Register `SCUA50` writer"] pub type W = crate :: W < Scua50Spec > ; # [doc = "Field `CacheableForCM4F0x000000000x00007FFFThe1st32KB` reader - cacheable for CM4F 0x00000000 ~ 0x00007FFF (the 1st 32KB)"] pub type CacheableForCm4f0x000000000x00007fffthe1st32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000000000x00007FFFThe1st32KB` writer - cacheable for CM4F 0x00000000 ~ 0x00007FFF (the 1st 32KB)"] pub type CacheableForCm4f0x000000000x00007fffthe1st32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000080000x0000FFFFThe2nd32KB` reader - cacheable for CM4F 0x00008000 ~ 0x0000FFFF (the 2nd 32KB)"] pub type CacheableForCm4f0x000080000x0000ffffthe2nd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000080000x0000FFFFThe2nd32KB` writer - cacheable for CM4F 0x00008000 ~ 0x0000FFFF (the 2nd 32KB)"] pub type CacheableForCm4f0x000080000x0000ffffthe2nd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000100000x00017FFFThe3rd32KB` reader - cacheable for CM4F 0x00010000 ~ 0x00017FFF (the 3rd 32KB)"] pub type CacheableForCm4f0x000100000x00017fffthe3rd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000100000x00017FFFThe3rd32KB` writer - cacheable for CM4F 0x00010000 ~ 0x00017FFF (the 3rd 32KB)"] pub type CacheableForCm4f0x000100000x00017fffthe3rd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000180000x0001FFFFThe4th32KB` reader - cacheable for CM4F 0x00018000 ~ 0x0001FFFF (the 4th 32KB)"] pub type CacheableForCm4f0x000180000x0001ffffthe4th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000180000x0001FFFFThe4th32KB` writer - cacheable for CM4F 0x00018000 ~ 0x0001FFFF (the 4th 32KB)"] pub type CacheableForCm4f0x000180000x0001ffffthe4th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000200000x00027FFFThe5th32KB` reader - cacheable for CM4F 0x00020000 ~ 0x00027FFF (the 5th 32KB)"] pub type CacheableForCm4f0x000200000x00027fffthe5th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000200000x00027FFFThe5th32KB` writer - cacheable for CM4F 0x00020000 ~ 0x00027FFF (the 5th 32KB)"] pub type CacheableForCm4f0x000200000x00027fffthe5th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000280000x0002FFFFThe6th32KB` reader - cacheable for CM4F 0x00028000 ~ 0x0002FFFF (the 6th 32KB)"] pub type CacheableForCm4f0x000280000x0002ffffthe6th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000280000x0002FFFFThe6th32KB` writer - cacheable for CM4F 0x00028000 ~ 0x0002FFFF (the 6th 32KB)"] pub type CacheableForCm4f0x000280000x0002ffffthe6th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000300000x00037FFFThe7th32KB` reader - cacheable for CM4F 0x00030000 ~ 0x00037FFF (the 7th 32KB)"] pub type CacheableForCm4f0x000300000x00037fffthe7th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000300000x00037FFFThe7th32KB` writer - cacheable for CM4F 0x00030000 ~ 0x00037FFF (the 7th 32KB)"] pub type CacheableForCm4f0x000300000x00037fffthe7th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000380000x0003FFFFThe8th32KB` reader - cacheable for CM4F 0x00038000 ~ 0x0003FFFF (the 8th 32KB)"] pub type CacheableForCm4f0x000380000x0003ffffthe8th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000380000x0003FFFFThe8th32KB` writer - cacheable for CM4F 0x00038000 ~ 0x0003FFFF (the 8th 32KB)"] pub type CacheableForCm4f0x000380000x0003ffffthe8th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000400000x00047FFFThe9th32KB` reader - cacheable for CM4F 0x00040000 ~ 0x00047FFF (the 9th 32KB)"] pub type CacheableForCm4f0x000400000x00047fffthe9th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000400000x00047FFFThe9th32KB` writer - cacheable for CM4F 0x00040000 ~ 0x00047FFF (the 9th 32KB)"] pub type CacheableForCm4f0x000400000x00047fffthe9th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000480000x0004FFFFThe10th32KB` reader - cacheable for CM4F 0x00048000 ~ 0x0004FFFF (the 10th 32KB)"] pub type CacheableForCm4f0x000480000x0004ffffthe10th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000480000x0004FFFFThe10th32KB` writer - cacheable for CM4F 0x00048000 ~ 0x0004FFFF (the 10th 32KB)"] pub type CacheableForCm4f0x000480000x0004ffffthe10th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000500000x00057FFFThe11st32KB` reader - cacheable for CM4F 0x00050000 ~ 0x00057FFF (the 11st 32KB)"] pub type CacheableForCm4f0x000500000x00057fffthe11st32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000500000x00057FFFThe11st32KB` writer - cacheable for CM4F 0x00050000 ~ 0x00057FFF (the 11st 32KB)"] pub type CacheableForCm4f0x000500000x00057fffthe11st32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000580000x0005FFFFThe12nd32KB` reader - cacheable for CM4F 0x00058000 ~ 0x0005FFFF (the 12nd 32KB)"] pub type CacheableForCm4f0x000580000x0005ffffthe12nd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000580000x0005FFFFThe12nd32KB` writer - cacheable for CM4F 0x00058000 ~ 0x0005FFFF (the 12nd 32KB)"] pub type CacheableForCm4f0x000580000x0005ffffthe12nd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000600000x00067FFFThe13rd32KB` reader - cacheable for CM4F 0x00060000 ~ 0x00067FFF (the 13rd 32KB)"] pub type CacheableForCm4f0x000600000x00067fffthe13rd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000600000x00067FFFThe13rd32KB` writer - cacheable for CM4F 0x00060000 ~ 0x00067FFF (the 13rd 32KB)"] pub type CacheableForCm4f0x000600000x00067fffthe13rd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000680000x0006FFFFThe14th32KB` reader - cacheable for CM4F 0x00068000 ~ 0x0006FFFF (the 14th 32KB)"] pub type CacheableForCm4f0x000680000x0006ffffthe14th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000680000x0006FFFFThe14th32KB` writer - cacheable for CM4F 0x00068000 ~ 0x0006FFFF (the 14th 32KB)"] pub type CacheableForCm4f0x000680000x0006ffffthe14th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000700000x00077FFFThe15th32KB` reader - cacheable for CM4F 0x00070000 ~ 0x00077FFF (the 15th 32KB)"] pub type CacheableForCm4f0x000700000x00077fffthe15th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000700000x00077FFFThe15th32KB` writer - cacheable for CM4F 0x00070000 ~ 0x00077FFF (the 15th 32KB)"] pub type CacheableForCm4f0x000700000x00077fffthe15th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000780000x0007FFFFThe16th32KB` reader - cacheable for CM4F 0x00078000 ~ 0x0007FFFF (the 16th 32KB)"] pub type CacheableForCm4f0x000780000x0007ffffthe16th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000780000x0007FFFFThe16th32KB` writer - cacheable for CM4F 0x00078000 ~ 0x0007FFFF (the 16th 32KB)"] pub type CacheableForCm4f0x000780000x0007ffffthe16th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000800000x00087FFFThe17th32KB` reader - cacheable for CM4F 0x00080000 ~ 0x00087FFF (the 17th 32KB)"] pub type CacheableForCm4f0x000800000x00087fffthe17th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000800000x00087FFFThe17th32KB` writer - cacheable for CM4F 0x00080000 ~ 0x00087FFF (the 17th 32KB)"] pub type CacheableForCm4f0x000800000x00087fffthe17th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000880000x0008FFFFThe18th32KB` reader - cacheable for CM4F 0x00088000 ~ 0x0008FFFF (the 18th 32KB)"] pub type CacheableForCm4f0x000880000x0008ffffthe18th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000880000x0008FFFFThe18th32KB` writer - cacheable for CM4F 0x00088000 ~ 0x0008FFFF (the 18th 32KB)"] pub type CacheableForCm4f0x000880000x0008ffffthe18th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000900000x00097FFFThe19th32KB` reader - cacheable for CM4F 0x00090000 ~ 0x00097FFF (the 19th 32KB)"] pub type CacheableForCm4f0x000900000x00097fffthe19th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000900000x00097FFFThe19th32KB` writer - cacheable for CM4F 0x00090000 ~ 0x00097FFF (the 19th 32KB)"] pub type CacheableForCm4f0x000900000x00097fffthe19th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000980000x0009FFFFThe20th32KB` reader - cacheable for CM4F 0x00098000 ~ 0x0009FFFF (the 20th 32KB)"] pub type CacheableForCm4f0x000980000x0009ffffthe20th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000980000x0009FFFFThe20th32KB` writer - cacheable for CM4F 0x00098000 ~ 0x0009FFFF (the 20th 32KB)"] pub type CacheableForCm4f0x000980000x0009ffffthe20th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000A00000x000A7FFFThe21st32KB` reader - cacheable for CM4F 0x000A0000 ~ 0x000A7FFF (the 21st 32KB)"] pub type CacheableForCm4f0x000a00000x000a7fffthe21st32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000A00000x000A7FFFThe21st32KB` writer - cacheable for CM4F 0x000A0000 ~ 0x000A7FFF (the 21st 32KB)"] pub type CacheableForCm4f0x000a00000x000a7fffthe21st32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000A80000x000AFFFFThe22nd32KB` reader - cacheable for CM4F 0x000A8000 ~ 0x000AFFFF (the 22nd 32KB)"] pub type CacheableForCm4f0x000a80000x000affffthe22nd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000A80000x000AFFFFThe22nd32KB` writer - cacheable for CM4F 0x000A8000 ~ 0x000AFFFF (the 22nd 32KB)"] pub type CacheableForCm4f0x000a80000x000affffthe22nd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000B00000x000B7FFFThe23rd32KB` reader - cacheable for CM4F 0x000B0000 ~ 0x000B7FFF (the 23rd 32KB)"] pub type CacheableForCm4f0x000b00000x000b7fffthe23rd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000B00000x000B7FFFThe23rd32KB` writer - cacheable for CM4F 0x000B0000 ~ 0x000B7FFF (the 23rd 32KB)"] pub type CacheableForCm4f0x000b00000x000b7fffthe23rd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000B80000x000BFFFFThe24th32KB` reader - cacheable for CM4F 0x000B8000 ~ 0x000BFFFF (the 24th 32KB)"] pub type CacheableForCm4f0x000b80000x000bffffthe24th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000B80000x000BFFFFThe24th32KB` writer - cacheable for CM4F 0x000B8000 ~ 0x000BFFFF (the 24th 32KB)"] pub type CacheableForCm4f0x000b80000x000bffffthe24th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000C00000x000C7FFFThe25th32KB` reader - cacheable for CM4F 0x000C0000 ~ 0x000C7FFF (the 25th 32KB)"] pub type CacheableForCm4f0x000c00000x000c7fffthe25th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000C00000x000C7FFFThe25th32KB` writer - cacheable for CM4F 0x000C0000 ~ 0x000C7FFF (the 25th 32KB)"] pub type CacheableForCm4f0x000c00000x000c7fffthe25th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000C80000x000CFFFFThe26th32KB` reader - cacheable for CM4F 0x000C8000 ~ 0x000CFFFF (the 26th 32KB)"] pub type CacheableForCm4f0x000c80000x000cffffthe26th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000C80000x000CFFFFThe26th32KB` writer - cacheable for CM4F 0x000C8000 ~ 0x000CFFFF (the 26th 32KB)"] pub type CacheableForCm4f0x000c80000x000cffffthe26th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000D00000x000D7FFFThe27th32KB` reader - cacheable for CM4F 0x000D0000 ~ 0x000D7FFF (the 27th 32KB)"] pub type CacheableForCm4f0x000d00000x000d7fffthe27th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000D00000x000D7FFFThe27th32KB` writer - cacheable for CM4F 0x000D0000 ~ 0x000D7FFF (the 27th 32KB)"] pub type CacheableForCm4f0x000d00000x000d7fffthe27th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000D80000x000DFFFFThe28th32KB` reader - cacheable for CM4F 0x000D8000 ~ 0x000DFFFF (the 28th 32KB)"] pub type CacheableForCm4f0x000d80000x000dffffthe28th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000D80000x000DFFFFThe28th32KB` writer - cacheable for CM4F 0x000D8000 ~ 0x000DFFFF (the 28th 32KB)"] pub type CacheableForCm4f0x000d80000x000dffffthe28th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000E00000x000E7FFFThe29th32KB` reader - cacheable for CM4F 0x000E0000 ~ 0x000E7FFF (the 29th 32KB)"] pub type CacheableForCm4f0x000e00000x000e7fffthe29th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000E00000x000E7FFFThe29th32KB` writer - cacheable for CM4F 0x000E0000 ~ 0x000E7FFF (the 29th 32KB)"] pub type CacheableForCm4f0x000e00000x000e7fffthe29th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000E80000x000EFFFFThe30th32KB` reader - cacheable for CM4F 0x000E8000 ~ 0x000EFFFF (the 30th 32KB)"] pub type CacheableForCm4f0x000e80000x000effffthe30th32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000E80000x000EFFFFThe30th32KB` writer - cacheable for CM4F 0x000E8000 ~ 0x000EFFFF (the 30th 32KB)"] pub type CacheableForCm4f0x000e80000x000effffthe30th32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000F00000x000F7FFFThe31st32KB` reader - cacheable for CM4F 0x000F0000 ~ 0x000F7FFF (the 31st 32KB)"] pub type CacheableForCm4f0x000f00000x000f7fffthe31st32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000F00000x000F7FFFThe31st32KB` writer - cacheable for CM4F 0x000F0000 ~ 0x000F7FFF (the 31st 32KB)"] pub type CacheableForCm4f0x000f00000x000f7fffthe31st32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CacheableForCM4F0x000F80000x000FFFFFThe32nd32KB` reader - cacheable for CM4F 0x000F8000 ~ 0x000FFFFF (the 32nd 32KB)"] pub type CacheableForCm4f0x000f80000x000fffffthe32nd32kbR = crate :: BitReader ; # [doc = "Field `CacheableForCM4F0x000F80000x000FFFFFThe32nd32KB` writer - cacheable for CM4F 0x000F8000 ~ 0x000FFFFF (the 32nd 32KB)"] pub type CacheableForCm4f0x000f80000x000fffffthe32nd32kbW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 0 - cacheable for CM4F 0x00000000 ~ 0x00007FFF (the 1st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000000000x00007fffthe1st32kb (& self) -> CacheableForCm4f0x000000000x00007fffthe1st32kbR { CacheableForCm4f0x000000000x00007fffthe1st32kbR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - cacheable for CM4F 0x00008000 ~ 0x0000FFFF (the 2nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000080000x0000ffffthe2nd32kb (& self) -> CacheableForCm4f0x000080000x0000ffffthe2nd32kbR { CacheableForCm4f0x000080000x0000ffffthe2nd32kbR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - cacheable for CM4F 0x00010000 ~ 0x00017FFF (the 3rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000100000x00017fffthe3rd32kb (& self) -> CacheableForCm4f0x000100000x00017fffthe3rd32kbR { CacheableForCm4f0x000100000x00017fffthe3rd32kbR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - cacheable for CM4F 0x00018000 ~ 0x0001FFFF (the 4th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000180000x0001ffffthe4th32kb (& self) -> CacheableForCm4f0x000180000x0001ffffthe4th32kbR { CacheableForCm4f0x000180000x0001ffffthe4th32kbR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - cacheable for CM4F 0x00020000 ~ 0x00027FFF (the 5th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000200000x00027fffthe5th32kb (& self) -> CacheableForCm4f0x000200000x00027fffthe5th32kbR { CacheableForCm4f0x000200000x00027fffthe5th32kbR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - cacheable for CM4F 0x00028000 ~ 0x0002FFFF (the 6th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000280000x0002ffffthe6th32kb (& self) -> CacheableForCm4f0x000280000x0002ffffthe6th32kbR { CacheableForCm4f0x000280000x0002ffffthe6th32kbR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - cacheable for CM4F 0x00030000 ~ 0x00037FFF (the 7th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000300000x00037fffthe7th32kb (& self) -> CacheableForCm4f0x000300000x00037fffthe7th32kbR { CacheableForCm4f0x000300000x00037fffthe7th32kbR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - cacheable for CM4F 0x00038000 ~ 0x0003FFFF (the 8th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000380000x0003ffffthe8th32kb (& self) -> CacheableForCm4f0x000380000x0003ffffthe8th32kbR { CacheableForCm4f0x000380000x0003ffffthe8th32kbR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - cacheable for CM4F 0x00040000 ~ 0x00047FFF (the 9th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000400000x00047fffthe9th32kb (& self) -> CacheableForCm4f0x000400000x00047fffthe9th32kbR { CacheableForCm4f0x000400000x00047fffthe9th32kbR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - cacheable for CM4F 0x00048000 ~ 0x0004FFFF (the 10th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000480000x0004ffffthe10th32kb (& self) -> CacheableForCm4f0x000480000x0004ffffthe10th32kbR { CacheableForCm4f0x000480000x0004ffffthe10th32kbR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - cacheable for CM4F 0x00050000 ~ 0x00057FFF (the 11st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000500000x00057fffthe11st32kb (& self) -> CacheableForCm4f0x000500000x00057fffthe11st32kbR { CacheableForCm4f0x000500000x00057fffthe11st32kbR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - cacheable for CM4F 0x00058000 ~ 0x0005FFFF (the 12nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000580000x0005ffffthe12nd32kb (& self) -> CacheableForCm4f0x000580000x0005ffffthe12nd32kbR { CacheableForCm4f0x000580000x0005ffffthe12nd32kbR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - cacheable for CM4F 0x00060000 ~ 0x00067FFF (the 13rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000600000x00067fffthe13rd32kb (& self) -> CacheableForCm4f0x000600000x00067fffthe13rd32kbR { CacheableForCm4f0x000600000x00067fffthe13rd32kbR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - cacheable for CM4F 0x00068000 ~ 0x0006FFFF (the 14th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000680000x0006ffffthe14th32kb (& self) -> CacheableForCm4f0x000680000x0006ffffthe14th32kbR { CacheableForCm4f0x000680000x0006ffffthe14th32kbR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - cacheable for CM4F 0x00070000 ~ 0x00077FFF (the 15th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000700000x00077fffthe15th32kb (& self) -> CacheableForCm4f0x000700000x00077fffthe15th32kbR { CacheableForCm4f0x000700000x00077fffthe15th32kbR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - cacheable for CM4F 0x00078000 ~ 0x0007FFFF (the 16th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000780000x0007ffffthe16th32kb (& self) -> CacheableForCm4f0x000780000x0007ffffthe16th32kbR { CacheableForCm4f0x000780000x0007ffffthe16th32kbR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - cacheable for CM4F 0x00080000 ~ 0x00087FFF (the 17th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000800000x00087fffthe17th32kb (& self) -> CacheableForCm4f0x000800000x00087fffthe17th32kbR { CacheableForCm4f0x000800000x00087fffthe17th32kbR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - cacheable for CM4F 0x00088000 ~ 0x0008FFFF (the 18th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000880000x0008ffffthe18th32kb (& self) -> CacheableForCm4f0x000880000x0008ffffthe18th32kbR { CacheableForCm4f0x000880000x0008ffffthe18th32kbR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - cacheable for CM4F 0x00090000 ~ 0x00097FFF (the 19th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000900000x00097fffthe19th32kb (& self) -> CacheableForCm4f0x000900000x00097fffthe19th32kbR { CacheableForCm4f0x000900000x00097fffthe19th32kbR :: new (((self . bits >> 18) & 1) != 0) } # [doc = "Bit 19 - cacheable for CM4F 0x00098000 ~ 0x0009FFFF (the 20th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000980000x0009ffffthe20th32kb (& self) -> CacheableForCm4f0x000980000x0009ffffthe20th32kbR { CacheableForCm4f0x000980000x0009ffffthe20th32kbR :: new (((self . bits >> 19) & 1) != 0) } # [doc = "Bit 20 - cacheable for CM4F 0x000A0000 ~ 0x000A7FFF (the 21st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000a00000x000a7fffthe21st32kb (& self) -> CacheableForCm4f0x000a00000x000a7fffthe21st32kbR { CacheableForCm4f0x000a00000x000a7fffthe21st32kbR :: new (((self . bits >> 20) & 1) != 0) } # [doc = "Bit 21 - cacheable for CM4F 0x000A8000 ~ 0x000AFFFF (the 22nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000a80000x000affffthe22nd32kb (& self) -> CacheableForCm4f0x000a80000x000affffthe22nd32kbR { CacheableForCm4f0x000a80000x000affffthe22nd32kbR :: new (((self . bits >> 21) & 1) != 0) } # [doc = "Bit 22 - cacheable for CM4F 0x000B0000 ~ 0x000B7FFF (the 23rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000b00000x000b7fffthe23rd32kb (& self) -> CacheableForCm4f0x000b00000x000b7fffthe23rd32kbR { CacheableForCm4f0x000b00000x000b7fffthe23rd32kbR :: new (((self . bits >> 22) & 1) != 0) } # [doc = "Bit 23 - cacheable for CM4F 0x000B8000 ~ 0x000BFFFF (the 24th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000b80000x000bffffthe24th32kb (& self) -> CacheableForCm4f0x000b80000x000bffffthe24th32kbR { CacheableForCm4f0x000b80000x000bffffthe24th32kbR :: new (((self . bits >> 23) & 1) != 0) } # [doc = "Bit 24 - cacheable for CM4F 0x000C0000 ~ 0x000C7FFF (the 25th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000c00000x000c7fffthe25th32kb (& self) -> CacheableForCm4f0x000c00000x000c7fffthe25th32kbR { CacheableForCm4f0x000c00000x000c7fffthe25th32kbR :: new (((self . bits >> 24) & 1) != 0) } # [doc = "Bit 25 - cacheable for CM4F 0x000C8000 ~ 0x000CFFFF (the 26th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000c80000x000cffffthe26th32kb (& self) -> CacheableForCm4f0x000c80000x000cffffthe26th32kbR { CacheableForCm4f0x000c80000x000cffffthe26th32kbR :: new (((self . bits >> 25) & 1) != 0) } # [doc = "Bit 26 - cacheable for CM4F 0x000D0000 ~ 0x000D7FFF (the 27th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000d00000x000d7fffthe27th32kb (& self) -> CacheableForCm4f0x000d00000x000d7fffthe27th32kbR { CacheableForCm4f0x000d00000x000d7fffthe27th32kbR :: new (((self . bits >> 26) & 1) != 0) } # [doc = "Bit 27 - cacheable for CM4F 0x000D8000 ~ 0x000DFFFF (the 28th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000d80000x000dffffthe28th32kb (& self) -> CacheableForCm4f0x000d80000x000dffffthe28th32kbR { CacheableForCm4f0x000d80000x000dffffthe28th32kbR :: new (((self . bits >> 27) & 1) != 0) } # [doc = "Bit 28 - cacheable for CM4F 0x000E0000 ~ 0x000E7FFF (the 29th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000e00000x000e7fffthe29th32kb (& self) -> CacheableForCm4f0x000e00000x000e7fffthe29th32kbR { CacheableForCm4f0x000e00000x000e7fffthe29th32kbR :: new (((self . bits >> 28) & 1) != 0) } # [doc = "Bit 29 - cacheable for CM4F 0x000E8000 ~ 0x000EFFFF (the 30th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000e80000x000effffthe30th32kb (& self) -> CacheableForCm4f0x000e80000x000effffthe30th32kbR { CacheableForCm4f0x000e80000x000effffthe30th32kbR :: new (((self . bits >> 29) & 1) != 0) } # [doc = "Bit 30 - cacheable for CM4F 0x000F0000 ~ 0x000F7FFF (the 31st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000f00000x000f7fffthe31st32kb (& self) -> CacheableForCm4f0x000f00000x000f7fffthe31st32kbR { CacheableForCm4f0x000f00000x000f7fffthe31st32kbR :: new (((self . bits >> 30) & 1) != 0) } # [doc = "Bit 31 - cacheable for CM4F 0x000F8000 ~ 0x000FFFFF (the 32nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000f80000x000fffffthe32nd32kb (& self) -> CacheableForCm4f0x000f80000x000fffffthe32nd32kbR { CacheableForCm4f0x000f80000x000fffffthe32nd32kbR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - cacheable for CM4F 0x00000000 ~ 0x00007FFF (the 1st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000000000x00007fffthe1st32kb (& mut self) -> CacheableForCm4f0x000000000x00007fffthe1st32kbW < Scua50Spec > { CacheableForCm4f0x000000000x00007fffthe1st32kbW :: new (self , 0) } # [doc = "Bit 1 - cacheable for CM4F 0x00008000 ~ 0x0000FFFF (the 2nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000080000x0000ffffthe2nd32kb (& mut self) -> CacheableForCm4f0x000080000x0000ffffthe2nd32kbW < Scua50Spec > { CacheableForCm4f0x000080000x0000ffffthe2nd32kbW :: new (self , 1) } # [doc = "Bit 2 - cacheable for CM4F 0x00010000 ~ 0x00017FFF (the 3rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000100000x00017fffthe3rd32kb (& mut self) -> CacheableForCm4f0x000100000x00017fffthe3rd32kbW < Scua50Spec > { CacheableForCm4f0x000100000x00017fffthe3rd32kbW :: new (self , 2) } # [doc = "Bit 3 - cacheable for CM4F 0x00018000 ~ 0x0001FFFF (the 4th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000180000x0001ffffthe4th32kb (& mut self) -> CacheableForCm4f0x000180000x0001ffffthe4th32kbW < Scua50Spec > { CacheableForCm4f0x000180000x0001ffffthe4th32kbW :: new (self , 3) } # [doc = "Bit 4 - cacheable for CM4F 0x00020000 ~ 0x00027FFF (the 5th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000200000x00027fffthe5th32kb (& mut self) -> CacheableForCm4f0x000200000x00027fffthe5th32kbW < Scua50Spec > { CacheableForCm4f0x000200000x00027fffthe5th32kbW :: new (self , 4) } # [doc = "Bit 5 - cacheable for CM4F 0x00028000 ~ 0x0002FFFF (the 6th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000280000x0002ffffthe6th32kb (& mut self) -> CacheableForCm4f0x000280000x0002ffffthe6th32kbW < Scua50Spec > { CacheableForCm4f0x000280000x0002ffffthe6th32kbW :: new (self , 5) } # [doc = "Bit 6 - cacheable for CM4F 0x00030000 ~ 0x00037FFF (the 7th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000300000x00037fffthe7th32kb (& mut self) -> CacheableForCm4f0x000300000x00037fffthe7th32kbW < Scua50Spec > { CacheableForCm4f0x000300000x00037fffthe7th32kbW :: new (self , 6) } # [doc = "Bit 7 - cacheable for CM4F 0x00038000 ~ 0x0003FFFF (the 8th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000380000x0003ffffthe8th32kb (& mut self) -> CacheableForCm4f0x000380000x0003ffffthe8th32kbW < Scua50Spec > { CacheableForCm4f0x000380000x0003ffffthe8th32kbW :: new (self , 7) } # [doc = "Bit 8 - cacheable for CM4F 0x00040000 ~ 0x00047FFF (the 9th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000400000x00047fffthe9th32kb (& mut self) -> CacheableForCm4f0x000400000x00047fffthe9th32kbW < Scua50Spec > { CacheableForCm4f0x000400000x00047fffthe9th32kbW :: new (self , 8) } # [doc = "Bit 9 - cacheable for CM4F 0x00048000 ~ 0x0004FFFF (the 10th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000480000x0004ffffthe10th32kb (& mut self) -> CacheableForCm4f0x000480000x0004ffffthe10th32kbW < Scua50Spec > { CacheableForCm4f0x000480000x0004ffffthe10th32kbW :: new (self , 9) } # [doc = "Bit 10 - cacheable for CM4F 0x00050000 ~ 0x00057FFF (the 11st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000500000x00057fffthe11st32kb (& mut self) -> CacheableForCm4f0x000500000x00057fffthe11st32kbW < Scua50Spec > { CacheableForCm4f0x000500000x00057fffthe11st32kbW :: new (self , 10) } # [doc = "Bit 11 - cacheable for CM4F 0x00058000 ~ 0x0005FFFF (the 12nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000580000x0005ffffthe12nd32kb (& mut self) -> CacheableForCm4f0x000580000x0005ffffthe12nd32kbW < Scua50Spec > { CacheableForCm4f0x000580000x0005ffffthe12nd32kbW :: new (self , 11) } # [doc = "Bit 12 - cacheable for CM4F 0x00060000 ~ 0x00067FFF (the 13rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000600000x00067fffthe13rd32kb (& mut self) -> CacheableForCm4f0x000600000x00067fffthe13rd32kbW < Scua50Spec > { CacheableForCm4f0x000600000x00067fffthe13rd32kbW :: new (self , 12) } # [doc = "Bit 13 - cacheable for CM4F 0x00068000 ~ 0x0006FFFF (the 14th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000680000x0006ffffthe14th32kb (& mut self) -> CacheableForCm4f0x000680000x0006ffffthe14th32kbW < Scua50Spec > { CacheableForCm4f0x000680000x0006ffffthe14th32kbW :: new (self , 13) } # [doc = "Bit 14 - cacheable for CM4F 0x00070000 ~ 0x00077FFF (the 15th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000700000x00077fffthe15th32kb (& mut self) -> CacheableForCm4f0x000700000x00077fffthe15th32kbW < Scua50Spec > { CacheableForCm4f0x000700000x00077fffthe15th32kbW :: new (self , 14) } # [doc = "Bit 15 - cacheable for CM4F 0x00078000 ~ 0x0007FFFF (the 16th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000780000x0007ffffthe16th32kb (& mut self) -> CacheableForCm4f0x000780000x0007ffffthe16th32kbW < Scua50Spec > { CacheableForCm4f0x000780000x0007ffffthe16th32kbW :: new (self , 15) } # [doc = "Bit 16 - cacheable for CM4F 0x00080000 ~ 0x00087FFF (the 17th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000800000x00087fffthe17th32kb (& mut self) -> CacheableForCm4f0x000800000x00087fffthe17th32kbW < Scua50Spec > { CacheableForCm4f0x000800000x00087fffthe17th32kbW :: new (self , 16) } # [doc = "Bit 17 - cacheable for CM4F 0x00088000 ~ 0x0008FFFF (the 18th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000880000x0008ffffthe18th32kb (& mut self) -> CacheableForCm4f0x000880000x0008ffffthe18th32kbW < Scua50Spec > { CacheableForCm4f0x000880000x0008ffffthe18th32kbW :: new (self , 17) } # [doc = "Bit 18 - cacheable for CM4F 0x00090000 ~ 0x00097FFF (the 19th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000900000x00097fffthe19th32kb (& mut self) -> CacheableForCm4f0x000900000x00097fffthe19th32kbW < Scua50Spec > { CacheableForCm4f0x000900000x00097fffthe19th32kbW :: new (self , 18) } # [doc = "Bit 19 - cacheable for CM4F 0x00098000 ~ 0x0009FFFF (the 20th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000980000x0009ffffthe20th32kb (& mut self) -> CacheableForCm4f0x000980000x0009ffffthe20th32kbW < Scua50Spec > { CacheableForCm4f0x000980000x0009ffffthe20th32kbW :: new (self , 19) } # [doc = "Bit 20 - cacheable for CM4F 0x000A0000 ~ 0x000A7FFF (the 21st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000a00000x000a7fffthe21st32kb (& mut self) -> CacheableForCm4f0x000a00000x000a7fffthe21st32kbW < Scua50Spec > { CacheableForCm4f0x000a00000x000a7fffthe21st32kbW :: new (self , 20) } # [doc = "Bit 21 - cacheable for CM4F 0x000A8000 ~ 0x000AFFFF (the 22nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000a80000x000affffthe22nd32kb (& mut self) -> CacheableForCm4f0x000a80000x000affffthe22nd32kbW < Scua50Spec > { CacheableForCm4f0x000a80000x000affffthe22nd32kbW :: new (self , 21) } # [doc = "Bit 22 - cacheable for CM4F 0x000B0000 ~ 0x000B7FFF (the 23rd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000b00000x000b7fffthe23rd32kb (& mut self) -> CacheableForCm4f0x000b00000x000b7fffthe23rd32kbW < Scua50Spec > { CacheableForCm4f0x000b00000x000b7fffthe23rd32kbW :: new (self , 22) } # [doc = "Bit 23 - cacheable for CM4F 0x000B8000 ~ 0x000BFFFF (the 24th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000b80000x000bffffthe24th32kb (& mut self) -> CacheableForCm4f0x000b80000x000bffffthe24th32kbW < Scua50Spec > { CacheableForCm4f0x000b80000x000bffffthe24th32kbW :: new (self , 23) } # [doc = "Bit 24 - cacheable for CM4F 0x000C0000 ~ 0x000C7FFF (the 25th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000c00000x000c7fffthe25th32kb (& mut self) -> CacheableForCm4f0x000c00000x000c7fffthe25th32kbW < Scua50Spec > { CacheableForCm4f0x000c00000x000c7fffthe25th32kbW :: new (self , 24) } # [doc = "Bit 25 - cacheable for CM4F 0x000C8000 ~ 0x000CFFFF (the 26th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000c80000x000cffffthe26th32kb (& mut self) -> CacheableForCm4f0x000c80000x000cffffthe26th32kbW < Scua50Spec > { CacheableForCm4f0x000c80000x000cffffthe26th32kbW :: new (self , 25) } # [doc = "Bit 26 - cacheable for CM4F 0x000D0000 ~ 0x000D7FFF (the 27th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000d00000x000d7fffthe27th32kb (& mut self) -> CacheableForCm4f0x000d00000x000d7fffthe27th32kbW < Scua50Spec > { CacheableForCm4f0x000d00000x000d7fffthe27th32kbW :: new (self , 26) } # [doc = "Bit 27 - cacheable for CM4F 0x000D8000 ~ 0x000DFFFF (the 28th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000d80000x000dffffthe28th32kb (& mut self) -> CacheableForCm4f0x000d80000x000dffffthe28th32kbW < Scua50Spec > { CacheableForCm4f0x000d80000x000dffffthe28th32kbW :: new (self , 27) } # [doc = "Bit 28 - cacheable for CM4F 0x000E0000 ~ 0x000E7FFF (the 29th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000e00000x000e7fffthe29th32kb (& mut self) -> CacheableForCm4f0x000e00000x000e7fffthe29th32kbW < Scua50Spec > { CacheableForCm4f0x000e00000x000e7fffthe29th32kbW :: new (self , 28) } # [doc = "Bit 29 - cacheable for CM4F 0x000E8000 ~ 0x000EFFFF (the 30th 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000e80000x000effffthe30th32kb (& mut self) -> CacheableForCm4f0x000e80000x000effffthe30th32kbW < Scua50Spec > { CacheableForCm4f0x000e80000x000effffthe30th32kbW :: new (self , 29) } # [doc = "Bit 30 - cacheable for CM4F 0x000F0000 ~ 0x000F7FFF (the 31st 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000f00000x000f7fffthe31st32kb (& mut self) -> CacheableForCm4f0x000f00000x000f7fffthe31st32kbW < Scua50Spec > { CacheableForCm4f0x000f00000x000f7fffthe31st32kbW :: new (self , 30) } # [doc = "Bit 31 - cacheable for CM4F 0x000F8000 ~ 0x000FFFFF (the 32nd 32KB)"] # [inline (always)] pub fn cacheable_for_cm4f0x000f80000x000fffffthe32nd32kb (& mut self) -> CacheableForCm4f0x000f80000x000fffffthe32nd32kbW < Scua50Spec > { CacheableForCm4f0x000f80000x000fffffthe32nd32kbW :: new (self , 31) } } # [doc = "CM4F Cacheable Area Declaration\n\nYou can [`read`](crate::Reg::read) this register and get [`scua50::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`scua50::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Scua50Spec ; impl crate :: RegisterSpec for Scua50Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`scua50::R`](R) reader structure"] impl crate :: Readable for Scua50Spec { } # [doc = "`write(|w| ..)` method takes [`scua50::W`](W) writer structure"] impl crate :: Writable for Scua50Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SCUA50 to value 0xffff_ffff"] impl crate :: Resettable for Scua50Spec { const RESET_VALUE : u32 = 0xffff_ffff ; }