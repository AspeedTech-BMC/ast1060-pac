# [doc = "Register `SCU630` reader"] pub type R = crate :: R < Scu630Spec > ; # [doc = "Register `SCU630` writer"] pub type W = crate :: W < Scu630Spec > ; # [doc = "Field `DisGPIOQ0IntPullDown` reader - Disable GPIOQ0 Internal Pull-Down"] pub type DisGpioq0intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ0IntPullDown` writer - Disable GPIOQ0 Internal Pull-Down"] pub type DisGpioq0intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ1IntPullDown` reader - Disable GPIOQ1 Internal Pull-Down"] pub type DisGpioq1intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ1IntPullDown` writer - Disable GPIOQ1 Internal Pull-Down"] pub type DisGpioq1intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ2IntPullDown` reader - Disable GPIOQ2 Internal Pull-Down"] pub type DisGpioq2intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ2IntPullDown` writer - Disable GPIOQ2 Internal Pull-Down"] pub type DisGpioq2intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ3IntPullDown` reader - Disable GPIOQ3 Internal Pull-Down"] pub type DisGpioq3intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ3IntPullDown` writer - Disable GPIOQ3 Internal Pull-Down"] pub type DisGpioq3intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ4IntPullDown` reader - Disable GPIOQ4 Internal Pull-Down"] pub type DisGpioq4intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ4IntPullDown` writer - Disable GPIOQ4 Internal Pull-Down"] pub type DisGpioq4intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ5IntPullUp` reader - Disable GPIOQ5 Internal Pull-Up"] pub type DisGpioq5intPullUpR = crate :: BitReader ; # [doc = "Field `DisGPIOQ5IntPullUp` writer - Disable GPIOQ5 Internal Pull-Up"] pub type DisGpioq5intPullUpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ6IntPullUp` reader - Disable GPIOQ6 Internal Pull-Up"] pub type DisGpioq6intPullUpR = crate :: BitReader ; # [doc = "Field `DisGPIOQ6IntPullUp` writer - Disable GPIOQ6 Internal Pull-Up"] pub type DisGpioq6intPullUpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOQ7IntPullDown` reader - Disable GPIOQ7 Internal Pull-Down"] pub type DisGpioq7intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOQ7IntPullDown` writer - Disable GPIOQ7 Internal Pull-Down"] pub type DisGpioq7intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR0IntPullDown` reader - Disable GPIOR0 Internal Pull-Down"] pub type DisGpior0intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOR0IntPullDown` writer - Disable GPIOR0 Internal Pull-Down"] pub type DisGpior0intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR1IntPullDown` reader - Disable GPIOR1 Internal Pull-Down"] pub type DisGpior1intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOR1IntPullDown` writer - Disable GPIOR1 Internal Pull-Down"] pub type DisGpior1intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR2IntPullUp` reader - Disable GPIOR2 Internal Pull-Up"] pub type DisGpior2intPullUpR = crate :: BitReader ; # [doc = "Field `DisGPIOR2IntPullUp` writer - Disable GPIOR2 Internal Pull-Up"] pub type DisGpior2intPullUpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR3IntPullUp` reader - Disable GPIOR3 Internal Pull-Up"] pub type DisGpior3intPullUpR = crate :: BitReader ; # [doc = "Field `DisGPIOR3IntPullUp` writer - Disable GPIOR3 Internal Pull-Up"] pub type DisGpior3intPullUpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR4IntPullDown` reader - Disable GPIOR4 Internal Pull-Down"] pub type DisGpior4intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOR4IntPullDown` writer - Disable GPIOR4 Internal Pull-Down"] pub type DisGpior4intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR5IntPullDown` reader - Disable GPIOR5 Internal Pull-Down"] pub type DisGpior5intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOR5IntPullDown` writer - Disable GPIOR5 Internal Pull-Down"] pub type DisGpior5intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR6IntPullUp` reader - Disable GPIOR6 Internal Pull-Up"] pub type DisGpior6intPullUpR = crate :: BitReader ; # [doc = "Field `DisGPIOR6IntPullUp` writer - Disable GPIOR6 Internal Pull-Up"] pub type DisGpior6intPullUpW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOR7IntPullDown` reader - Disable GPIOR7 Internal Pull-Down"] pub type DisGpior7intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOR7IntPullDown` writer - Disable GPIOR7 Internal Pull-Down"] pub type DisGpior7intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOS0IntPullDown` reader - Disable GPIOS0 Internal Pull-Down"] pub type DisGpios0intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOS0IntPullDown` writer - Disable GPIOS0 Internal Pull-Down"] pub type DisGpios0intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOS1IntPullDown` reader - Disable GPIOS1 Internal Pull-Down"] pub type DisGpios1intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOS1IntPullDown` writer - Disable GPIOS1 Internal Pull-Down"] pub type DisGpios1intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `DisGPIOS2IntPullDown` reader - Disable GPIOS2 Internal Pull-Down"] pub type DisGpios2intPullDownR = crate :: BitReader ; # [doc = "Field `DisGPIOS2IntPullDown` writer - Disable GPIOS2 Internal Pull-Down"] pub type DisGpios2intPullDownW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 0 - Disable GPIOQ0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq0int_pull_down (& self) -> DisGpioq0intPullDownR { DisGpioq0intPullDownR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Disable GPIOQ1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq1int_pull_down (& self) -> DisGpioq1intPullDownR { DisGpioq1intPullDownR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - Disable GPIOQ2 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq2int_pull_down (& self) -> DisGpioq2intPullDownR { DisGpioq2intPullDownR :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 3 - Disable GPIOQ3 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq3int_pull_down (& self) -> DisGpioq3intPullDownR { DisGpioq3intPullDownR :: new (((self . bits >> 3) & 1) != 0) } # [doc = "Bit 4 - Disable GPIOQ4 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq4int_pull_down (& self) -> DisGpioq4intPullDownR { DisGpioq4intPullDownR :: new (((self . bits >> 4) & 1) != 0) } # [doc = "Bit 5 - Disable GPIOQ5 Internal Pull-Up"] # [inline (always)] pub fn dis_gpioq5int_pull_up (& self) -> DisGpioq5intPullUpR { DisGpioq5intPullUpR :: new (((self . bits >> 5) & 1) != 0) } # [doc = "Bit 6 - Disable GPIOQ6 Internal Pull-Up"] # [inline (always)] pub fn dis_gpioq6int_pull_up (& self) -> DisGpioq6intPullUpR { DisGpioq6intPullUpR :: new (((self . bits >> 6) & 1) != 0) } # [doc = "Bit 7 - Disable GPIOQ7 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq7int_pull_down (& self) -> DisGpioq7intPullDownR { DisGpioq7intPullDownR :: new (((self . bits >> 7) & 1) != 0) } # [doc = "Bit 8 - Disable GPIOR0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior0int_pull_down (& self) -> DisGpior0intPullDownR { DisGpior0intPullDownR :: new (((self . bits >> 8) & 1) != 0) } # [doc = "Bit 9 - Disable GPIOR1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior1int_pull_down (& self) -> DisGpior1intPullDownR { DisGpior1intPullDownR :: new (((self . bits >> 9) & 1) != 0) } # [doc = "Bit 10 - Disable GPIOR2 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior2int_pull_up (& self) -> DisGpior2intPullUpR { DisGpior2intPullUpR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 11 - Disable GPIOR3 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior3int_pull_up (& self) -> DisGpior3intPullUpR { DisGpior3intPullUpR :: new (((self . bits >> 11) & 1) != 0) } # [doc = "Bit 12 - Disable GPIOR4 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior4int_pull_down (& self) -> DisGpior4intPullDownR { DisGpior4intPullDownR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Disable GPIOR5 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior5int_pull_down (& self) -> DisGpior5intPullDownR { DisGpior5intPullDownR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - Disable GPIOR6 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior6int_pull_up (& self) -> DisGpior6intPullUpR { DisGpior6intPullUpR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Disable GPIOR7 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior7int_pull_down (& self) -> DisGpior7intPullDownR { DisGpior7intPullDownR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Disable GPIOS0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios0int_pull_down (& self) -> DisGpios0intPullDownR { DisGpios0intPullDownR :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 17 - Disable GPIOS1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios1int_pull_down (& self) -> DisGpios1intPullDownR { DisGpios1intPullDownR :: new (((self . bits >> 17) & 1) != 0) } # [doc = "Bit 18 - Disable GPIOS2 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios2int_pull_down (& self) -> DisGpios2intPullDownR { DisGpios2intPullDownR :: new (((self . bits >> 18) & 1) != 0) } } impl W { # [doc = "Bit 0 - Disable GPIOQ0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq0int_pull_down (& mut self) -> DisGpioq0intPullDownW < Scu630Spec > { DisGpioq0intPullDownW :: new (self , 0) } # [doc = "Bit 1 - Disable GPIOQ1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq1int_pull_down (& mut self) -> DisGpioq1intPullDownW < Scu630Spec > { DisGpioq1intPullDownW :: new (self , 1) } # [doc = "Bit 2 - Disable GPIOQ2 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq2int_pull_down (& mut self) -> DisGpioq2intPullDownW < Scu630Spec > { DisGpioq2intPullDownW :: new (self , 2) } # [doc = "Bit 3 - Disable GPIOQ3 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq3int_pull_down (& mut self) -> DisGpioq3intPullDownW < Scu630Spec > { DisGpioq3intPullDownW :: new (self , 3) } # [doc = "Bit 4 - Disable GPIOQ4 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq4int_pull_down (& mut self) -> DisGpioq4intPullDownW < Scu630Spec > { DisGpioq4intPullDownW :: new (self , 4) } # [doc = "Bit 5 - Disable GPIOQ5 Internal Pull-Up"] # [inline (always)] pub fn dis_gpioq5int_pull_up (& mut self) -> DisGpioq5intPullUpW < Scu630Spec > { DisGpioq5intPullUpW :: new (self , 5) } # [doc = "Bit 6 - Disable GPIOQ6 Internal Pull-Up"] # [inline (always)] pub fn dis_gpioq6int_pull_up (& mut self) -> DisGpioq6intPullUpW < Scu630Spec > { DisGpioq6intPullUpW :: new (self , 6) } # [doc = "Bit 7 - Disable GPIOQ7 Internal Pull-Down"] # [inline (always)] pub fn dis_gpioq7int_pull_down (& mut self) -> DisGpioq7intPullDownW < Scu630Spec > { DisGpioq7intPullDownW :: new (self , 7) } # [doc = "Bit 8 - Disable GPIOR0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior0int_pull_down (& mut self) -> DisGpior0intPullDownW < Scu630Spec > { DisGpior0intPullDownW :: new (self , 8) } # [doc = "Bit 9 - Disable GPIOR1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior1int_pull_down (& mut self) -> DisGpior1intPullDownW < Scu630Spec > { DisGpior1intPullDownW :: new (self , 9) } # [doc = "Bit 10 - Disable GPIOR2 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior2int_pull_up (& mut self) -> DisGpior2intPullUpW < Scu630Spec > { DisGpior2intPullUpW :: new (self , 10) } # [doc = "Bit 11 - Disable GPIOR3 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior3int_pull_up (& mut self) -> DisGpior3intPullUpW < Scu630Spec > { DisGpior3intPullUpW :: new (self , 11) } # [doc = "Bit 12 - Disable GPIOR4 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior4int_pull_down (& mut self) -> DisGpior4intPullDownW < Scu630Spec > { DisGpior4intPullDownW :: new (self , 12) } # [doc = "Bit 13 - Disable GPIOR5 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior5int_pull_down (& mut self) -> DisGpior5intPullDownW < Scu630Spec > { DisGpior5intPullDownW :: new (self , 13) } # [doc = "Bit 14 - Disable GPIOR6 Internal Pull-Up"] # [inline (always)] pub fn dis_gpior6int_pull_up (& mut self) -> DisGpior6intPullUpW < Scu630Spec > { DisGpior6intPullUpW :: new (self , 14) } # [doc = "Bit 15 - Disable GPIOR7 Internal Pull-Down"] # [inline (always)] pub fn dis_gpior7int_pull_down (& mut self) -> DisGpior7intPullDownW < Scu630Spec > { DisGpior7intPullDownW :: new (self , 15) } # [doc = "Bit 16 - Disable GPIOS0 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios0int_pull_down (& mut self) -> DisGpios0intPullDownW < Scu630Spec > { DisGpios0intPullDownW :: new (self , 16) } # [doc = "Bit 17 - Disable GPIOS1 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios1int_pull_down (& mut self) -> DisGpios1intPullDownW < Scu630Spec > { DisGpios1intPullDownW :: new (self , 17) } # [doc = "Bit 18 - Disable GPIOS2 Internal Pull-Down"] # [inline (always)] pub fn dis_gpios2int_pull_down (& mut self) -> DisGpios2intPullDownW < Scu630Spec > { DisGpios2intPullDownW :: new (self , 18) } } # [doc = "Disable GPIO Internal Pull-Down \\#4\n\nYou can [`read`](crate::Reg::read) this register and get [`scu630::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`scu630::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Scu630Spec ; impl crate :: RegisterSpec for Scu630Spec { type Ux = u32 ; } # [doc = "`read()` method returns [`scu630::R`](R) reader structure"] impl crate :: Readable for Scu630Spec { } # [doc = "`write(|w| ..)` method takes [`scu630::W`](W) writer structure"] impl crate :: Writable for Scu630Spec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets SCU630 to value 0"] impl crate :: Resettable for Scu630Spec { }